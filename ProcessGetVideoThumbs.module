<?php

/**
 * ProcessWire Get Video Thumbs
 * by Adrian Jones
 *
 * Automatically populates an images field with all available thumbnails from YouTube and Vimeo
 *
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class ProcessGetVideoThumbs extends WireData implements Module, ConfigurableModule {

    /**
     * getModuleInfo is a module required by all modules to tell ProcessWire about them
     *
     * @return array
     *
     */
    public static function getModuleInfo() {
        return array(
            'title' => __('Get Video Thumbnails'),
            'version' => 8,
            'summary' => __('Automatically populates an images field with thumbnails (poster imagses) from YouTube and Vimeo'),
            'singular' => true,
            'autoload' => true,
            );
    }


    protected static $configDefaults = array(
        // global
        "videoURLField" => "",
        "videoImagesField" => "",
        "youTubeImageNames" => "maxresdefault, hqdefault, default, 0, 1, 2, 3",
        "vimeoImageNames" => "thumbnail_large, thumbnail_medium, thumbnail_small",
        "whichImages" => "firstAvailable",
        "disableRenaming" => 0
    );


    /**
     * Data as used by the get/set functions
     *
     */
    protected $data = array();



    /**
     * Initialize the module
     *
     */
    public function init() {
        $this->pages->addHookAfter('save', $this, 'importImages');
    }

    public function ready() {

        // we're interested in page editor only
        if(wire('page')->process != 'ProcessPageEdit') return;
    }

    public function importImages($event){

        $page = $event->arguments[0];

        if($page->{$this->videoImagesField}){
            $page->{$this->videoImagesField}->deleteAll();
            $page->save($this->videoImagesField);
        }

        foreach($this->videoURLField as $videoURLField){

            if($page->{$videoURLField}){

                if($this->videoImagesField == '') return $this->error($this->_("Your module config is not fully configured. Please fill out the Video Images Field"));

                if(!$page->fields->{$this->videoImagesField}) return $this->error($this->_("The template for this page does not contain the defined video images field. Please add the field that you defined in the module settings: {$this->videoImagesField}"));

                $videoURL = $page->{$videoURLField};

                //Quicker method, but only works with YouTube with the watch?v= format
                //parse_str( parse_url( $videoURL, PHP_URL_QUERY ), $array_of_vars );
                //$videoID = $array_of_vars['v'];

                // perform a strpos fast check before performing regex check
                if(strpos($videoURL, '://www.youtube.com/watch') !== false || strpos($videoURL, '://www.youtube.com/v/') !== false || strpos($videoURL, '://youtu.be/') !== false) {

                    //               1: full URL                                                 2:video id    3: query string (optional)
                    $regex = '#\s*(https?://(?:www\.)?youtu(?:.be|be.com)+/(?:watch/?\?v=|v/)?([^\s&<\'"]+))(&[-_,.=&;a-zA-Z0-9]*)?.*?#';
                    if(!preg_match_all($regex, $videoURL, $matches)) return;

                    foreach($matches[0] as $key => $line) {
                        $videoID = $matches[2][$key];

                        $noMoreImages = 0;
                        foreach(preg_split('/[\.,\s]/', $this->youTubeImageNames, -1, PREG_SPLIT_NO_EMPTY) as $image_id){

                            //Copy images to PW images field
                            if($this->fileExists("http://img.youtube.com/vi/".$videoID."/".$image_id.".jpg") && $noMoreImages == 0){
                                $page->{$this->videoImagesField}->add("http://img.youtube.com/vi/".$videoID."/".$image_id.".jpg");
                                $page->save($this->videoImagesField);

                                if($this->disableRenaming != 1){
                                    $currentImage = $page->{$this->videoImagesField}->get("name=$image_id.jpg");
                                    $this->renameImage($page, $currentImage, $videoID, $image_id);
                                }

                                if($this->whichImages == 'firstAvailable') $noMoreImages = 1;
                            }

                        }
                    }
                }

                if(strpos($videoURL, '://vimeo.com/') !== false) {

                    if(preg_match_all('#\s*(https?://vimeo.com/(\d+)).*?#', $videoURL, $matches)) {

                        foreach($matches[0] as $key => $line) {
                            $videoID = $matches[2][$key];

                            $data = json_decode(file_get_contents("http://vimeo.com/api/v2/video/$videoID.json", true));

                            $noMoreImages = 0;
                            foreach(preg_split('/[\.,\s]/', $this->vimeoImageNames, -1, PREG_SPLIT_NO_EMPTY) as $image_name){
                                //Copy images to PW images field
                                if($this->fileExists($data[0]->$image_name) && $noMoreImages == 0){
                                    $page->{$this->videoImagesField}->add($data[0]->$image_name);
                                    $page->save($this->videoImagesField);

                                    if($this->disableRenaming != 1){
                                        $currentImage = $page->{$this->videoImagesField}->get("name=".pathinfo($data[0]->$image_name, PATHINFO_BASENAME));
                                        $this->renameImage($page, $currentImage, $videoID, $image_name);
                                    }

                                    if($this->whichImages == 'firstAvailable') $noMoreImages = 1;
                                }
                            }
                        }
                    }
                }
            }
        }
    }


    /**
     * Helper function to rename images
     *
     */
    public function renameImage($page, $currentImage, $videoID, $image_id){

        $newImgName = pathinfo($currentImage->filename, PATHINFO_DIRNAME) . "/".strtolower($videoID)."-". $image_id .".jpg";

        // copy and rename
        copy($currentImage->filename, $newImgName);

        // remove old, add new image to page
        $page->{$this->videoImagesField}->remove($currentImage); // orig, will get deleted
        $page->{$this->videoImagesField}->add($newImgName); // new

        $page->save($this->videoImagesField);

    }



    /**
     * Helper function to check if image exists on remote server
     *
     */
    public function fileExists($path){
        return (@fopen($path,"r")==true);
    }



    /**
     * Get any inputfields used for configuration of this Fieldtype.
     *
     * This is in addition to any configuration fields supplied by the parent Inputfield.
     *
     * @param Field $field
     * @return InputfieldWrapper
     *
     */
    public static function getModuleConfigInputfields(array $data) {

        $modules = wire('modules');

        foreach(self::$configDefaults as $key => $value) {
            if(!isset($data[$key]) || $data[$key]=='') $data[$key] = $value;
        }

        $inputfields = new InputfieldWrapper();

        $f = $modules->get("InputfieldAsmSelect");
        $f->required = true;
        $f->attr('name', 'videoURLField');
        $f->attr('value', $data["videoURLField"]);
        $f->label = __('Video URL Fields');
        $f->description = __('The field(s) to grab the video URL from.');
        $f->setAsmSelectOption('sortable', false);
        // populate with all available fields
        foreach(wire('fields') as $fieldoption) {
            // filter out incompatible field types
            if($fieldoption->type == "FieldtypeText" || $fieldoption->type == "FieldtypeTextarea" || $fieldoption->type == "FieldtypeURL")  $f->addOption($fieldoption->name);
        }
        if(isset($data['videoURLField'])) $f->value = $data['videoURLField'];
        //$f->notes = __("");
        $inputfields->add($f);


        $f = $modules->get("InputfieldSelect");
        $f->required = true;
        $f->attr('name', 'videoImagesField');
        $f->attr('value', $data["videoImagesField"]);
        $f->label = __('Video Images Field');
        $f->description = __('The field to send the video thumbnail images to.');
        $f->addOption('');
        // populate with all available fields
        foreach(wire('fields') as $fieldoption) {
            // filter out incompatible field types
            if($fieldoption->type == "FieldtypeImage")  $f->addOption($fieldoption->name);
        }
        if(isset($data['videoImagesField'])) $f->value = $data['videoImagesField'];
        //$f->notes = __("");
        $inputfields->add($f);

        $f = $modules->get("InputfieldText");
        $f->attr('name', 'youTubeImageNames');
        $f->attr('value', $data["youTubeImageNames"]);
        $f->attr('size', 70);
        $f->label = __('YouTube Image Names');
        $f->description = __('The names of the images you want to get. You can list as many of the options as you wish.');
        $f->notes = __("Default: maxresdefault, hqdefault, default, 0, 1, 2, 3");
        $inputfields->add($f);

        $f = $modules->get("InputfieldText");
        $f->attr('name', 'vimeoImageNames');
        $f->attr('value', $data["vimeoImageNames"]);
        $f->attr('size', 70);
        $f->label = __('Vimeo Image Names');
        $f->description = __('The names of the images you want to get. You can list as many of the options as you wish.');
        $f->notes = __("Default: thumbnail_large, thumbnail_medium, thumbnail_small");
        $inputfields->add($f);

        $f = $modules->get("InputfieldSelect");
        $f->attr('name', 'whichImages');
        $f->attr('value', $data["whichImages"]);
        $f->addOption('firstAvailable', __('First Available'));
        $f->addOption('allAvailable', __('All Available'));
        $f->attr('value', $data["whichImages"]);
        $f->label = __('Which Images');
        $f->description = __('Whether you want all the listed images grabbed, or just the first one that is available from those listed in the Image Names fields above.');
        $inputfields->add($f);

        $f = $modules->get("InputfieldCheckbox");
        $f->attr('name', 'disableRenaming');
        $f->attr('value', $data["disableRenaming"] ? $data["disableRenaming"] : 0 );
        $f->attr('checked', $data["disableRenaming"] == '1' ? 'checked' : '' );
        $f->label = __('Disable Renaming');
        $f->description = __('By default, images are renamed to a defined format: videoID-ImageName.jpg. You can disable this behavior by checking this.');
        $inputfields->add($f);


        return $inputfields;

    }

}
